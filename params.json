{"name":"Sockit","body":"SOCKit\r\n======\r\n\r\nString <-> Object Coding for Objective-C. Rhymes with \"socket\".\r\n\r\nWith SOCKit and [SOCPattern][] you can easily transform objects into strings and vice versa.\r\n\r\n### Two examples, cuz devs love examples.\r\n\r\n```obj-c\r\nSOCPattern* pattern = [SOCPattern patternWithString:@\"api.github.com/users/:username/gists\"];\r\n[pattern stringFromObject:githubUser];\r\n> @\"api.github.com/users/jverkoey/gists\"\r\n```\r\n\r\n```obj-c\r\nSOCPattern* pattern = [SOCPattern patternWithString:@\"github.com/:username\"];\r\n[pattern performSelector:@selector(initWithUsername:) onObject:[GithubUser class] sourceString:@\"github.com/jverkoey\"];\r\n> <GithubUser> username = jverkoey\r\n```\r\n\r\n### Hey, this is really similar to defining routes in Rails.\r\n\r\nDamn straight it is.\r\n\r\n### And isn't this kind of like Three20's navigator?\r\n\r\nExcept hella better. It's also entirely incompatible with Three20 routes. This kinda blows if\r\nyou've already invested a ton of energy into Three20's routing tech, but here are a few reasons\r\nwhy SOCKit is better:\r\n\r\n1. *Selectors are not defined in the pattern*. The fact that Three20 requires that you define\r\n   selectors in the pattern is scary as hell: rename a method in one of your controllers and\r\n   your URL routing will silently break. No warnings, just broke. With SOCKit you define the\r\n   selectors using @selector notation and SOCKit infers the parameters from the pattern definition.\r\n   This way you can depend on the compiler to fire a warning if the selector isn't defined anywhere.\r\n2. *Parameters are encoded using true KVC*. You now have full access to [KVC collection operators].\r\n3. *SOCKit is fully unit tested and documented*. Not much more to be said here.\r\n\r\nHere's a quick breakdown of the differences between Three20 and SOCKit, if SOCKit were used as\r\nthe backend for Three20's URL routing.\r\n\r\n```\r\nThree20: [map from:@\"twitter://tweet/(initWithTweetId:)\" toViewController:[TweetController class]];\r\nSOCKit:  [map from:@\"twitter://tweet/:id\" toViewController:[TweetController class] selector:@selector(initWithTweetId:)];\r\n\r\nThree20: [map from:[Tweet class] name:@\"thread\" toURL:@\"twitter://tweet/(id)/thread\"];\r\nSOCKit:  [map from:[Tweet class] name:@\"thread\" toURL:@\"twitter://tweet/:id/thread\"];\r\n```\r\n\r\n## Where it's being used\r\n\r\nSOCKit is a sibling project to [Nimbus][], a light-weight and modular framework that makes it\r\neasy to blaze a trail with your iOS apps. Nimbus will soon be using SOCKit in a re-envisioning\r\nof Three20's navigator.\r\n\r\nUsers of RESTKit will notice that SOCKit provides similar functionality to RESTKit's\r\n[RKMakePathWithObject][]. In fact, both `RKMakePathWithObject` and the underlying `RKPathMatcher`\r\nclass rely on SOCKit behind the scenes.\r\n\r\n## Adding SOCKit to your project\r\n\r\nThis lightweight library is built to be a dead-simple airdrop directly into your project. Contained\r\nin SOCKit.h and SOCKit.m is all of the functionality you will need in order to start mapping\r\nStrings <-> Objects. To start using SOCKit, simply download or `git checkout` the SOCKit repo\r\nand drag SOCKit.h and SOCKit.m to your project's source tree. `#import \"SOCKit.h\"` where you want\r\nto use SOCKit and start pumping out some mad String <-> Object coding.\r\n\r\n## Some cool things\r\n\r\nWhen coding objects into strings you define parameters by prefixing the property name with a colon.\r\nSo if you have a Tweet object with a `tweetId` property, the pattern parameter name would look like\r\n`:tweetId`. Simple enough.\r\n\r\nBut now let's say you have a Tweet object that contains a reference to a TwitterUser object via\r\nthe `user` property, and that TwitterUser object has a `username` property. Check this out:\r\n`:user.username`. If this was one of my tweets and I encoded the Tweet object using a SOCKit\r\npattern the resulting string would be `@\"featherless\"`. KVC rocks.\r\n\r\n## Learning more\r\n\r\nIn-depth documentation can be found in the [SOCKit.h][SOCPattern] header file.\r\n\r\n## Contributing\r\n\r\nIf you find a bug in SOCKit please file an issue on the Github [SOCKit issue tracker][]. Even\r\nbetter: if you have a solution for the bug then fork the project and make a pull request.\r\n\r\n[SOCKit issue tracker]: https://github.com/jverkoey/sockit/issues\r\n[SOCPattern]: https://github.com/jverkoey/sockit/blob/master/SOCKit.h\r\n[KVC collection operators]: http://developer.apple.com/library/ios/#documentation/cocoa/conceptual/KeyValueCoding/Articles/CollectionOperators.html#//apple_ref/doc/uid/20002176-BAJEAIEE\r\n[Nimbus]: http://jverkoey.github.com/nimbus\r\n[RESTKit]: https://github.com/RestKit/RestKit\r\n[RKMakePathWithObject]: https://github.com/RestKit/RestKit/blob/master/Code/Network/RKClient.m#L37","tagline":"String <-> Object Coder for Objective-C","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}